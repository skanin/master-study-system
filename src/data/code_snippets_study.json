{
	"1": {
		"code": "public class Task1 {\n    public static int[] reverse(int[] arr) { // Takes an array as input and returns the reversed array\n        int i = 0, j = arr.length - 1, temp;\n        while (i < j) {\n            temp = arr[i];\n            arr[j] = arr[i];\n            arr[j] = temp;\n            i++;\n            j--;\n        }\n        return arr;\n    }\n\n    public static void main(String args[]) {\n        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n        arr = reverse(arr);\n        for (int i: arr) {\n            System.out.print(i + \" \");\n        }\n        /* Expected output: 10 9 8 7 6 5 4 3 2 1 */\n    }\n}",
		"help": false
	},
	"2": {
		"code": "class Task2 {\n    public static void main(String[] args) {\n        int[] A = {0, 1, 2, 2, 0, 0, 3, 1, 1, 0};\n        int[] B = new int[4];\n        for (int i = 0; i < A.length; i++) {\n            B[A[i]]++;\n        }\n        for (int j = 0; j < B.length; j++) {\n            for (int k = 0; k < B[j]; k++) {\n                System.out.print(j + \" \");\n            }\n        }\n        System.out.println(\".\");\n    }\n}",
		"help": true
	},
	"3": {
		"code": "public class ShoppingCart { // Class for simulating a shopping cart at a Store\n    private Store store;\n    private Map < Item, Integer > items = new HashMap < Item, Integer > ();\n    public ShoppingCart(Store store) {\n        this.store = store;\n    }\n    public void addItem(Item item) { // Adds an item to the shopping cart, or increases the amount of an existing item\n        if (!store.hasItem(item)) throw new IllegalArgumentException(\"Item not in store\");\n        int count = items.get(item) == null ? 0 : items.get(item);\n        items.put(item, count);\n    }\n    public void removeItem(Item item) { // Removes an item from the shopping cart, or decreases the amount of an existing item\n        int count = items.get(item) == null ? 0 : items.get(item);\n        if (count > 1) items.put(item, count - 1);\n        else if (count == 1) items.remove(item);\n    }\n    public double getTotal() { // Returns the total price of all items in the shopping cart\n        return items.entrySet().stream().mapToDouble(entry - > entry.getKey().getPrice() * entry.getValue()).sum();\n    }\n    public void print() { // Prints the items in the shopping cart\n        for (Item item: items.keySet()) System.out.println(item.getName() + \": \" + items.get(item) + \"x\" + item.getPrice() + item.getCurrency());\n        System.out.println(\"Total: \" + getTotal());\n    }\n}\npublic class Item { // Class for simulating an Item in a Store\n    private String name, currency;\n    private double price;\n    public Item(String name, double price, String currency) {\n        this.name = name;\n        this.price = price;\n        this.currency = currency;\n    }\n    public String getName() {\n        return name;\n    }\n    public double getPrice() {\n        return price;\n    }\n    public String getCurrency() {\n        return currency;\n    }\n}\npublic class Store { // Class for simulating a Store that contains Items one can put in a ShoppingCart\n    public List < Item > items = Arrays.asList(new Item(\"Sugar\", 20.0, \"kr\"), new Item(\"Milk\", 16.5, \"kr\"), new Item(\"Bread\", 25.0, \"kr\"));\n    public boolean hasItem(Item item) { // Checks if a Store has an item\n        return !items.contains(item);\n    }\n    public static void main(String[] args) {\n        Store store = new Store(); // Init a Store\n        ShoppingCart shoppingCart = new ShoppingCart(store); // Init a ShoppingCart\n        shoppingCart.addItem(store.items.get(0)); // Add an item to the ShoppingCart\n        shoppingCart.addItem(store.items.get(1)); // Add an item to the ShoppingCart\n        shoppingCart.print(); // Print the items in the ShoppingCart\n    }\n}",
		"help": false
	},
	"4": {
		"code": "public class A {\n    private final int a = 10;\n    private final int b = 20;\n\n    public int C() {\n        return a;\n    }\n\n    public int D() {\n        return b;\n    }\n}\n\npublic class B extends A {\n    private int a;\n    private int b;\n\n    public B(int a, int b) {\n        this.a = a;\n        this.b = b;\n    }\n\n    @Override\n    public int C() {\n        return a;\n    }\n\n    public static void main(String[] args) {\n        B b = new B(30, 40);\n        System.out.println(b.C());\n        System.out.println(b.D());\n    }\n}",
		"help": true
	},
	"5": {
		"code": "public class CoffeeReview { // Class for storing scores for a coffee made by a person\n    private List < Integer > scores = new ArrayList < Integer > (); // Stores the scores for this coffee review\n    private List < Person > reviewers = new ArrayList < Person > (); // Reviewers in this coffee review\n    private String name; // Name of the coffee made\n    private Person coffeeMaker; // Person that made the coffee\n    public CoffeeReview(String name, Person coffeeMaker) {\n        this.name = name;\n        this.coffeeMaker = coffeeMaker;\n    }\n    public void addScore(Person reviewer, int score) { // Adds a score to the coffee in this coffee review\n        if (score < 1 || score > 6) throw new IllegalArgumentException(\"Score must be between 1 and 6\");\n        if (reviewer == null) throw new IllegalArgumentException(\"Reviewer cannot be null\");\n        if (reviewer == this.coffeeMaker) throw new IllegalArgumentException(\"Reviewer cannot be the owner\");\n        if (!reviewers.contains(reviewer)) reviewers.add(reviewer);\n        if (!scores.contains(score)) scores.add(score);\n    }\n    public double getAverageScore() { // Gets the average score in this coffee review\n        return scores.stream().reduce(0, Integer::sum) / scores.size();\n    }\n}\npublic class Person { // A person that can make a coffee or be a reviewer of a coffee\n    private List < CoffeeReview > coffees = new ArrayList < CoffeeReview > ();\n    private String name;\n    public Person(String name) {\n        this.name = name;\n    }\n    public CoffeeReview addCoffee(String name) {\n        // Adds a coffee review for a coffee. The coffee is a fictive coffe made by this person, and exists only as the name of the coffee review\n        CoffeeReview coffeeReview = new CoffeeReview(name, this);\n        coffees.add(coffeeReview);\n        return coffeeReview;\n    }\n    public double getAverageScore() { // Gets the average score of all coffees made by this person\n        return coffees.stream().mapToDouble(CoffeeReview::getAverageScore).average().orElse(0);\n    }\n    public void reviewCoffee(CoffeeReview coffeeReview, int score) { // Reviews a coffee\n        coffeeReview.addScore(this, score);\n    }\n    public static void main(String[] args) {\n        Person p1 = new Person(\"Person1\");\n        Person p2 = new Person(\"Person2\");\n        Person p3 = new Person(\"Person3\");\n        CoffeeReview coffeeReview = p1.addCoffee(\"Monday coffee\");\n        p2.reviewCoffee(coffeeReview, 6);\n        p3.reviewCoffee(coffeeReview, 5);\n        System.out.println(p1.getAverageScore());\n        /* Expected output: 5.5 */\n    }\n}",
		"help": false
	},
	"6": {
		"code": "   public class A {\n       public int b(double d1, double d2) {\n           return (int)(d1 + d2);\n       }\n   }\n   public class B extends A {\n       public double a(int i) {\n           return i * 2;\n       }\n   }\n   public class C extends B {\n       @Override\n       public int b(double d1, double d2) {\n           return (int)(d1 * d2);\n       }\n       public List < Integer > d(int f) {\n           return Arrays.asList(b(f, f), super.b(f + 0.5, f));\n       }\n   }\n   public class D extends C {\n       private List < Integer > e;\n       public D(int e) {\n           this.e = d(e);\n       }\n       public double e() {\n           e.stream().forEach(g - > a(g))\n           return e.stream().reduce(0, Integer::sum).doubleValue();\n       }\n       public static void main(String[] args) {\n           D d = new D(5);\n           System.out.println(d.e());\n       }\n   }",
		"help": true
	}
}
