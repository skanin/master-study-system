{"version":3,"sources":["components/Pretest/styles.js","components/Pretest/PretestCode.jsx","components/Home/Home.jsx","components/Pretest/Question.jsx","components/Pretest/PretestQuestions.jsx","components/Pretest/Pretest.jsx","App.js","reportWebVitals.js","index.js"],"names":["Pre","styled","div","pre","Line","LineNo","span","LineContent","global","window","Prism","require","PretestCode","code","trim","defaultProps","theme","language","className","style","tokens","getLineProps","getTokenProps","map","line","i","key","token","Home","navigate","useNavigate","onClick","Question","props","id","tag","onChange","e","onQuestionChange","fontSize","fontWeight","question","console","log","checked","answers","answer","index","check","name","type","defaultChecked","PretestQuestions","pretestId","React","useState","questions","origQuestions","setOrigQuestions","currQuestions","setCurrQuestions","showNextButton","setShowNextButton","showPrevButton","setShowPrevButton","buttonClicked","setButtonClicked","useEffect","generateQuestions","nextButton","hasOwnProperty","undefined","questionsTemp","tmpButtonClicked","length","slice","forEach","element","questionId","target","indexOf","correct","Pretest","useParams","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11a11640.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  font-family: sans-serif;\n  text-align: center;\n`;\n\nexport const Pre = styled.pre`\n  text-align: left;\n//   margin: 1em 0;\n  padding: 0.5em;\n  overflow: scroll;\n  // min-height: 100%;\n  & .token-line {\n    line-height: 1.3em;\n    height: 1.3em;\n  }\n  margin: 0;\n  grid-column: 1;\n`;\n\nexport const Line = styled.div`\n  display: table-row;\n  font-size: 70%;\n`;\n\nexport const LineNo = styled.span`\n  display: table-cell;\n  text-align: right;\n  padding-right: 1em;\n  user-select: none;\n  opacity: 0.5;\n`;\n\nexport const LineContent = styled.span`\n  display: table-cell;\n  \n`;\n","import React from 'react'\nimport { Pre, Line, LineNo, LineContent } from \"./styles\";\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport theme from \"prism-react-renderer/themes/vsDark\";\nimport Prism from \"prism-react-renderer/prism\";\n\n(typeof global !== \"undefined\" ? global : window).Prism = Prism;\n\nrequire(\"prismjs/components/prism-java\");\n\n\nfunction PretestCode() {\n\n    const code = `\nPublic static void main(String[] args){\n    System.out.println(\"Hello World!\");\n}\n        `.trim();\n\n    return(\n        <Highlight {...defaultProps} theme={theme} code={code} language=\"java\">\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\n          <Pre className={className} style={style}>\n            {tokens.map((line, i) => (\n              <Line key={i} {...getLineProps({ line, key: i })}>\n                <LineNo>{i + 1}</LineNo>\n                <LineContent>\n                  {line.map((token, key) => (\n                    <span key={key} {...getTokenProps({ token, key })} />\n                  ))}\n                </LineContent>\n              </Line>\n            ))}\n          </Pre>\n        )}\n      </Highlight>\n    )\n}\n\nexport default PretestCode;","import React from 'react';\nimport {useNavigate} from 'react-router-dom';\n\nimport './Home.css';\n\nfunction Home(){\n    const navigate = useNavigate();\n    const startPretest = () => {\n        navigate('/master-study-system/pretest/1');        \n    }\n\n    return (\n        <div className='container'>\n            <h1>Information</h1>\n            <div className='informationText'>\n                <p>You will be You will now be faced with X tasks. These tasks are meant for detemining your level of programming expertise.</p>\n                <br />\n                <p>The questions will be in a multiple choice format. When you are finished answering the questions, press “submit and next problem” to get to the next problem</p>\n            </div>\n            <button className='startButton' onClick={() => startPretest()}>Start pretest</button>\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport {Form, FormGroup, Input, Label} from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst Question = (props) => {\n\n    const generateAnswers = () => {\n        console.log(props.checked);\n        return props.answers.map((answer, index) => (\n                <FormGroup key={index} check>\n                    <Input name={'radio' + props.id} type=\"radio\" id={index} defaultChecked = {index == props.checked}/>\n                    {' '}\n                    <Label check>\n                        {answer}\n                    </Label>\n                </FormGroup>\n            )\n        )\n    }\n\n    return (\n        <div className=\"question\" id={\"question\" + props.id}>\n            <FormGroup tag=\"fieldset\" onChange={(e) => {props.onQuestionChange(e)}}>\n                <legend style={{fontSize: \"medium\", fontWeight: \"bold\"}}>{props.question}</legend>\n                {generateAnswers()}\n            </FormGroup>\n        </div>\n    );\n}\n\nexport default Question;","import React, { useEffect } from 'react';\nimport {Form} from 'reactstrap';\nimport questions from './questions.json';\nimport Question from './Question';\n\nfunction PretestQuestions(props) {\n\n    const pretestId = props.pretestId;\n\n    const [origQuestions, setOrigQuestions] = React.useState(questions);\n    const [currQuestions, setCurrQuestions] = React.useState([]);\n    const [showNextButton, setShowNextButton] = React.useState(false);\n    const [showPrevButton, setShowPrevButton] = React.useState(false);\n    const [buttonClicked, setButtonClicked] = React.useState(-1);\n    const [answers, setAnswers] = React.useState([]);\n\n\n    useEffect(() => {\n        generateQuestions();\n    }, [])\n\n    const generateQuestions = (nextButton = true) => {\n        if(!origQuestions.hasOwnProperty(pretestId)) {\n            setCurrQuestions(undefined);\n        }\n\n        let questionsTemp = origQuestions[pretestId].questions;\n        let tmpButtonClicked = buttonClicked + (nextButton ? 1 : -1);\n        \n\n        setShowNextButton(questionsTemp.length > tmpButtonClicked*3 + 3)\n        setShowPrevButton(tmpButtonClicked*3 >= 3)\n        setButtonClicked(tmpButtonClicked)\n        setCurrQuestions([...questionsTemp.slice(tmpButtonClicked*3, tmpButtonClicked*3+3)]);\n    }\n\n    const onQuestionChange = (e) => {\n        origQuestions[pretestId].questions.forEach(element => {\n            if(element.questionId == [e.target.name][0].slice([e.target.name][0].indexOf('radio') + 5)){\n                element.checked = e.target.id\n            }\n        })\n        setOrigQuestions(origQuestions);\n    }\n\n    return(\n        <div className={props.className}>\n            {currQuestions !== undefined ?\n             <Form className=\"questionsForm\">\n                {currQuestions.map((question) => (<Question key={question.questionId} id={question.questionId} question={question.question} answers={question.answers} correct={question.correct} onQuestionChange={onQuestionChange} checked = {question.checked}/>))}\n            </Form> : \n            <h1>There are no questions for this pretest task</h1>}\n            <div className=\"buttons\">\n                {showPrevButton && <button id='prevButton' onClick={() => {generateQuestions(false)}}>Prev</button>}\n                {!showNextButton && <button id='submitButton'>Submit</button>}\n                {showNextButton && <button id='nextButton' onClick={() => {generateQuestions()}}>Next</button>}\n            </div>\n        </div>\n    )\n}\n\nexport default PretestQuestions;","import React from 'react'\nimport { useParams } from \"react-router-dom\";\n\nimport PretestCode from './PretestCode';\n\nimport './Pretest.css'\nimport PretestQuestions from './PretestQuestions';\n\nfunction Pretest() {\n    const { pretestId } = useParams()\n\n    return (\n        <div className='main'>\n            <PretestCode />\n            <PretestQuestions className='right' pretestId={pretestId}/>\n        </div>\n    )\n}\n\nexport default Pretest;","import './App.css';\n\nimport Home from './components/Home/Home';\nimport Pretest from './components/Pretest/Pretest';\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/master-study-system/pretest/:pretestId\" element={<Pretest />} />\n        <Route path=\"/master-study-system\" element={<Home />}/>\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}